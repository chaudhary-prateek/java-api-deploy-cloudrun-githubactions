name: Deploy to Cloud Run (Dev)

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to GCP Cloud Run
    runs-on: ubuntu-latest
    #needs: [release]

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java (JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the application
      - name: Build with Maven
        run: mvn clean package -Dmaven.test.skip=true

      # Step 5: Authenticate with GCP to read secrets
      - name: Authenticate with GCP to read secrets
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_READ_SECRET_SA_KEY }}

      # Step 6: Retrieve and prepare env-vars file
      - name: Retrieve and prepare env-vars file
        run: |
          # Download merged .env file from Secret Manager
          gcloud secrets versions access latest --secret=dev-ih-ai-merged-env > merged.env

          # Export important variables to GITHUB_ENV
          source merged.env
          echo "DEV_PROJECT_NAME=$DEV_PROJECT_NAME" >> $GITHUB_ENV
          echo "DEV_DEPLOY_REGION=$DEV_DEPLOY_REGION" >> $GITHUB_ENV
          echo "DEV_AI_ARTIFACT_REGISTRY_NAME=$DEV_AI_ARTIFACT_REGISTRY_NAME" >> $GITHUB_ENV
          echo "DEV_AI_CLOUD_RUN_FUNCTION_NAME=$DEV_AI_CLOUD_RUN_FUNCTION_NAME" >> $GITHUB_ENV
          echo "DEV_AI_SERVER_PORT=$DEV_AI_SERVER_PORT" >> $GITHUB_ENV
          echo "DEV_DATABASE_INSTANCE=$DEV_DATABASE_INSTANCE" >> $GITHUB_ENV
          echo "DEV_VPC_CONNECTOR=$DEV_VPC_CONNECTOR" >> $GITHUB_ENV

          # Convert .env to YAML for Cloud Run
          awk -F= '{gsub(/"/, "\\\"", $2); print $1 ": \"" $2 "\"" }' merged.env > env.yaml

      # Step 7: Authenticate with GCP for deployment
      - name: Authenticate with GCP for deploy
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_READ_SECRET_SA_KEY }}

      # Step 8: Configure Docker to use Artifact Registry
      - name: Configure Docker
        run: gcloud auth configure-docker $DEV_DEPLOY_REGION-docker.pkg.dev

      # Step 9: Get latest GitHub release version
      - name: Get Latest Release Version
        id: get_release
        run: |
          response=$(curl --silent -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases")
          latest_version=$(echo "$response" | jq -r 'if type=="array" and .[0] then .[0].tag_name else "No Release Found" end')
          latest_version="${latest_version#v}"
          echo "version=$latest_version" >> $GITHUB_OUTPUT

      # Step 10: Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          docker build -t $DEV_DEPLOY_REGION-docker.pkg.dev/$DEV_PROJECT_NAME/$DEV_AI_ARTIFACT_REGISTRY_NAME/dev:${{ steps.get_release.outputs.version }} .
          docker push $DEV_DEPLOY_REGION-docker.pkg.dev/$DEV_PROJECT_NAME/$DEV_AI_ARTIFACT_REGISTRY_NAME/dev:${{ steps.get_release.outputs.version }}

      # Step 11: Deploy to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $DEV_AI_CLOUD_RUN_FUNCTION_NAME --timeout=600s \
            --image $DEV_DEPLOY_REGION-docker.pkg.dev/$DEV_PROJECT_NAME/$DEV_AI_ARTIFACT_REGISTRY_NAME/dev:${{ steps.get_release.outputs.version }} \
            --port=$DEV_AI_SERVER_PORT \
            --platform managed \
            --region $DEV_DEPLOY_REGION \
            --allow-unauthenticated \
            --vpc-connector $DEV_VPC_CONNECTOR \
            --add-cloudsql-instances=$DEV_PROJECT_NAME:$DEV_DEPLOY_REGION:$DEV_DATABASE_INSTANCE \
            --env-vars-file env.yaml
