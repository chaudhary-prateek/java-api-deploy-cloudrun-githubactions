#backup of workflow file it is working fine
name: üöÄ Deploy Java Module to Cloud Run (Dev)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    env:
      ENV_YAML_FILE: env.yaml
name: üöÄ Deploy Java Module to Cloud Run (Dev)

on:
  push:
    branches:
      - cicd-test

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    env:
    # COMMON_SECRET: COMMON_SECRET
    # MODULE_SECRET: ih-ai-service
    # MERGED_ENV_FILE: merged.env
      ENV_YAML_FILE: env.yaml

    steps:
      # Step 1: Checkout
      - name: üì• Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Java 17
      - name: ‚òï Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven
      - name: üì¶ Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build App
      - name: üèóÔ∏è Build Java App
        run: mvn clean package -Dmaven.test.skip=true

      # Step 5: Authenticate with GCP to read secrets
      - name: üîê Authenticate to read GCP secrets
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_READ_SECRET_SA_KEY }}
        
      # Step 6.1: Retrieve secrets from GCP Secret Manager
      - name: üîê Merge GCP secrets into $GITHUB_ENV + service.env to env.yaml
        run: |
          echo "üì• Fetching COMMON and SERVICE secrets..."

          DEV_SERVICE_ACCOUNT_KEY=$(gcloud secrets versions access latest --secret=DEV_SERVICE_ACCOUNT_KEY)
          # Export service account key as multi-line syntax
          echo "DEV_SERVICE_ACCOUNT_KEY<<EOF" >> $GITHUB_ENV
          echo "$DEV_SERVICE_ACCOUNT_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Fetch COMMON and SERVICE secrets
          gcloud secrets versions access latest --secret=COMMON_SECRET | tr -d '\r' | sed '/^\s*$/d; /^\s*#/d' > common.env
          gcloud secrets versions access latest --secret=SERVICE_SECRET | tr -d '\r' | sed '/^\s*$/d; /^\s*#/d' > service.env


          # Merge common + service.env
          cat common.env service.env > merged.env

          echo "üîÑ Exporting merged.env to \$GITHUB_ENV and JSON if needed..."
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ "$line" =~ ^\s*$ || "$line" =~ ^\s*# ]] && continue

            key="${line%%=*}"
            value="${line#*=}"

            key=$(echo "$key" | sed -E 's/^["'\''[:space:]]*|["'\''[:space:]]*$//g')
            value=$(echo "$value" | sed -E 's/^["'\''[:space:]]*|["'\''[:space:]]*$//g')
            echo "::add-mask::$value"        # ‚úÖ Mask the value from logs
            echo "$key=$value" >> "$GITHUB_ENV"
          done < merged.env

          echo "üì¶ Creating env.yaml from service.env for Cloud Run..."
          sed '/^\s*$/d; /^\s*#/d' service.env | while IFS='=' read -r k v; do
            k=$(echo "$k" | sed -E 's/^["'\''[:space:]]*|["'\''[:space:]]*$//g')
            v=$(echo "$v" | sed -E 's/^["'\''[:space:]]*|["'\''[:space:]]*$//g; s/"/\\"/g')
            echo "$k: \"$v\""
          done > env.yaml

         #echo "‚úÖ Final env.yaml:"
         #cat env.yaml

      # Step 7: Authenticate for Deploy
      - name: üîë Authenticate to deploy
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.DEV_SERVICE_ACCOUNT_KEY }}

      # Step 8: Configure Docker for Artifact Registry
      - name: ‚öôÔ∏è Configure Docker
        run: gcloud auth configure-docker $DEV_DEPLOY_REGION-docker.pkg.dev

      # Step 9: Optional Version Tag
      - name: üè∑Ô∏è Set Image Tag
        id: version
        run: echo "version=latest" >> $GITHUB_OUTPUT

      # Step 10: Build & Push Image
      - name: üê≥ Build & Push Docker Image
        run: |
          IMAGE_URI=$DEV_DEPLOY_REGION-docker.pkg.dev/$DEV_PROJECT_NAME/$DEV_AI_ARTIFACT_REGISTRY_NAME/dev:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # Step 11: Deploy to Cloud Run
      - name: üöÄ Deploy to Cloud Run
        run: |
          gcloud run deploy $DEV_AI_CLOUD_RUN_FUNCTION_NAME \
            --image $IMAGE_URI \
            --region $DEV_DEPLOY_REGION \
            --port=$SERVER_PORT \
            --platform=managed \
            --timeout=600s \
            --allow-unauthenticated \
            --vpc-connector=$DEV_VPC_CONNECTOR \
            --add-cloudsql-instances=$DEV_PROJECT_NAME:$DEV_DEPLOY_REGION:$DEV_DATABASE_INSTANCE \
            --env-vars-file $ENV_YAML_FILE

      # Step 12: Clean up
      - name: üßπ Clean Workspace
        run: rm -f env.yaml common.env service.env merged.env

    steps:
      # Step 1: Checkout repository
      - name: üì• Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java 17
      - name: ‚òï Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: üì¶ Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # Step 4: Build Java App
      - name: üèóÔ∏è Build Java App
        run: mvn clean package -Dmaven.test.skip=true

      # Step 5: Authenticate to read secrets from GCP
      - name: üîê Authenticate to read GCP secrets
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_READ_SECRET_SA_KEY }}

      # Step 6: Fetch secrets and prepare env files
      - name: üß™ Merge secrets & create .env and env.yaml
        run: |
          echo "üì• Fetching COMMON and SERVICE secrets..."

          # Fetch service account key
          gcloud secrets versions access latest --secret=DEV_SERVICE_ACCOUNT_KEY > dev_sa_key.json

          # Export to $GITHUB_ENV as multi-line variable
          echo "DEV_SERVICE_ACCOUNT_KEY<<EOF" >> $GITHUB_ENV
          cat dev_sa_key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Fetch and clean .env secrets
          gcloud secrets versions access latest --secret=COMMON_SECRET | tr -d '\r' | sed '/^\s*$/d; /^\s*#/d' > common.env
          gcloud secrets versions access latest --secret=SERVICE_SECRET | tr -d '\r' | sed '/^\s*$/d; /^\s*#/d' > service.env

          # Merge .env files
          cat common.env service.env > merged.env

          echo "üîÑ Exporting merged.env to \$GITHUB_ENV..."
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ "$line" =~ ^\s*$ || "$line" =~ ^\s*# ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            echo "$key=$value" >> $GITHUB_ENV
          done < merged.env

          # Generate Cloud Run env.yaml
          echo "üì¶ Creating env.yaml from service.env..."
          sed '/^\s*$/d; /^\s*#/d' service.env | while IFS='=' read -r k v; do
            k=$(echo "$k" | sed -E 's/^\s*|\s*$//g')
            v=$(echo "$v" | sed -E 's/^\s*|\s*$//g; s/"/\\"/g')
            echo "$k: \"$v\""
          done > env.yaml

      # Step 7: Authenticate for deployment using exported service account
      - name: üîë Authenticate to deploy
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.DEV_SERVICE_ACCOUNT_KEY }}

      # Step 8: Configure Docker for Artifact Registry
      - name: ‚öôÔ∏è Configure Docker for Artifact Registry
        run: gcloud auth configure-docker $DEV_DEPLOY_REGION-docker.pkg.dev

      # Step 9: Build and Push Docker image
      - name: üê≥ Build and Push Docker Image
        run: |
          IMAGE_URI=$DEV_DEPLOY_REGION-docker.pkg.dev/$DEV_PROJECT_NAME/$DEV_AI_ARTIFACT_REGISTRY_NAME/dev:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # Step 10: Deploy to Cloud Run
      - name: üöÄ Deploy to Cloud Run
        run: |
          gcloud run deploy $DEV_AI_CLOUD_RUN_FUNCTION_NAME \
            --image $IMAGE_URI \
            --region $DEV_DEPLOY_REGION \
            --port=$SERVER_PORT \
            --platform=managed \
            --timeout=600s \
            --allow-unauthenticated \
            --vpc-connector=$DEV_VPC_CONNECTOR \
            --add-cloudsql-instances=$DEV_PROJECT_NAME:$DEV_DEPLOY_REGION:$DEV_DATABASE_INSTANCE \
            --env-vars-file $ENV_YAML_FILE

      # Step 11: Cleanup temporary files
      - name: üßπ Clean up temporary files
        run: rm -f env.yaml common.env service.env merged.env dev_sa_key.json
