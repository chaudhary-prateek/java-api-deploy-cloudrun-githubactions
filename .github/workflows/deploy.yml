name: Deploy to Cloud Run (Dev)

on:
  push:
    branches:
      - main

#on:
#  workflow_run:
#    workflows: ["Release"]
#    types:
#      - completed

jobs:
  deploy:
    name: Deploy to GCP Cloud Run
    runs-on: ubuntu-latest
    #needs: [release]

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java (JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the application
      - name: Build with Maven
        run: mvn clean package -Dmaven.test.skip=true

      # Step 5: Authenticate with GCP to read secrets
      - name: Authenticate with GCP to read secrets
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_READ_SECRET_SA_KEY }}

      # Step 6: Retrieve and Process GCP Secrets
      - name: üîê Merge GCP secrets into env + env.yaml
        run: |
          echo "üì• Fetching COMMON_SECRET and SERVICE_SECRET..."
      
          # Download both secrets as .env chunks
          gcloud secrets versions access latest --secret=$common > common.env
          gcloud secrets versions access latest --secret=$lang-api > service.env
      
          echo "üß© Merging both env files..."
          cat common.env service.env > merged.env
      
          echo "üîç Merged env file (for Docker):"
          cat merged.env
      
          echo "üîÑ Exporting merged.env to \$GITHUB_ENV..."
          while IFS='=' read -r key value; do
            # Skip blank lines and comments
            if [[ "$key" =~ ^\s*$ || "$key" =~ ^\s*# ]]; then continue; fi
      
            # Handle service account key safely as multi-line secret
            if [[ "$key" == "DEV_SERVICE_ACCOUNT_KEY" ]]; then
              echo "$key<<EOF" >> $GITHUB_ENV
              echo "$value" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            else
              echo "$key=$value" >> $GITHUB_ENV
            fi
          done < merged.env
      
          echo "üì¶ Creating env.yaml for Cloud Run..."
          sed '/^\s*$/d; /^\s*#/d' merged.env | awk -F '=' '
            NF==2 {
              gsub(/^"|"$/, "", $2);  # remove quotes
              gsub(/"/, "\\\"");      # escape quotes
              print $1 ": \"" $2 "\""
            }' > env.yaml
      
          echo "‚úÖ Final env.yaml:"
          cat env.yaml

      - name: Print merged.env
        run: cat -A merged.env


      # Step 7: Authenticate with GCP for deployment
      - name: Authenticate with GCP for deploy
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.DEV_GCP_DEPLOY_SA_KEY }}

      # Step 8: Configure Docker to use Artifact Registry
      - name: Configure Docker
        run: gcloud auth configure-docker $DEV_DEPLOY_REGION-docker.pkg.dev

      # Step 9: Get latest GitHub release version
      - name: Set Dummy Version for Testing
        id: get_release
        run: |
          echo "version=latest" >> $GITHUB_OUTPUT


      # Step 10: Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          docker build -t $DEV_DEPLOY_REGION-docker.pkg.dev/$DEV_PROJECT_NAME/$DEV_AI_ARTIFACT_REGISTRY_NAME/dev:latest .
          docker push $DEV_DEPLOY_REGION-docker.pkg.dev/$DEV_PROJECT_NAME/$DEV_AI_ARTIFACT_REGISTRY_NAME/dev:latest


      # Step 11: Deploy to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $DEV_AI_CLOUD_RUN_FUNCTION_NAME --timeout=600s \
            --image $DEV_DEPLOY_REGION-docker.pkg.dev/$DEV_PROJECT_NAME/$DEV_AI_ARTIFACT_REGISTRY_NAME/dev:${{ steps.get_release.outputs.version }} \
            --port=$DEV_AI_SERVER_PORT \
            --platform managed \
            --region $DEV_DEPLOY_REGION \
            --allow-unauthenticated \
            --vpc-connector $DEV_VPC_CONNECTOR \
            --add-cloudsql-instances=$DEV_PROJECT_NAME:$DEV_DEPLOY_REGION:$DEV_DATABASE_INSTANCE \
            --env-vars-file env.yaml
